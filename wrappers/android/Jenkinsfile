static def getTestParameters(def parallelTests, def buildCacheTests, def gradleScan) {
    def testParams = ["--console=verbose", "--no-daemon"]
    if (parallelTests) {
        testParams.add("--parallel")
    }

    if (buildCacheTests) {
        testParams.add("--build-cache")
    }

    if (gradleScan) {
        testParams.add("--scan")
    }

    // So CI dosn't do additional work. If it fails CI image should be updated.
    testParams.add("-Pandroid.builder.sdkDownload=false")

    return testParams.join(" ")
}

static def getTestPreTasks(def cleanTests) {

    def extraTasks = []
    if (cleanTests) {
        extraTasks.add("clean")
    }
    return extraTasks.join(" ")
}

static def getCheckTasks(def branch) {
    if (branch.startsWith("PR-")) {
        return "vitalJvmTest"
    } else {
        return "vitalTest"
    }
}

static def getConnectedCheckTasks(def branch) {
    return "connectedAndroidTest"
}


static def getLintTask(def debugBuild, def branch) {
    if (debugBuild && branch.startsWith("PR-")) {
        return ":target:mobile:app:lintCurrentStageDebug"
    } else {
        return ":target:mobile:app:lintCurrentProdRelease"
    }
}

def withDockerNetwork(Closure inner) {
    try {
        def n = UUID.randomUUID().toString()
        sh "docker network create --subnet 10.0.0.0/8 " + n
        inner.call(n)
    } finally {
        sh "docker network rm " + n
    }
}


pipeline {
    agent none

    parameters {
        choice(name: 'emulatorVersion', choices: ['30-google-x64', '29-google-x64', '28-playstore-x64'], description: 'Emulator version')
        booleanParam(defaultValue: true, description: "If `--parallel` flag should be used for tests.", name: 'parallelTests')
        booleanParam(defaultValue: false, description: "If build cache should be used for tests.", name: 'buildCacheTests')
        booleanParam(defaultValue: false, description: "If build scan should be created for test steps.", name: 'gradleScan')
        booleanParam(defaultValue: false, description: 'Indicates if clean command should be executed before tests.', name: 'cleanTests')
        booleanParam(defaultValue: true, description: 'Only perform checks on debug', name: 'debugBuild')
        booleanParam(defaultValue: false, description: 'Only perform checks on debug', name: 'lintTask')
        booleanParam(defaultValue: false, description: 'Notify build failure on slack', name: 'notifyFailure')
    }

    triggers {
        parameterizedCron(env.BRANCH_NAME.startsWith("develop") ? '0 4 * * * % lintTask=true;cleanTests=true;notifyFailure=true' : '')
    }

    options { timeout(time: 2, unit: 'HOURS') }

    stages {
        stage("Tests") {
            parallel {
                stage('Device Tests') {
                    // This is tmp config until declerative pipeline does not support sidecard docker images
                    //  https://issues.jenkins-ci.org/browse/JENKINS-46336?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel
                    agent { label 'docker' }

                    options {
                        timeout(time: 2, unit: "HOURS")
                    }

                    when {
                        expression { skipCi() }
                    }

                    steps {
                        sh "echo \"Node: ${NODE_NAME}\""
                        script {
                            withDockerNetwork { n ->
                                docker.build('pool-image', "--build-arg pool_ip=10.0.0.2 -f ci/indy-pool.dockerfile ./ci")
                                    .withRun("--ip=\"10.0.0.2\" --net=$n") { poolImage ->

                                        sh "sleep 10"

                                        docker.image("us-docker.pkg.dev/android-emulator-268719/images/${params.emulatorVersion}:30.1.2")
                                                .withRun("--device /dev/kvm --ip=\"10.0.0.3\" --net=$n") { emulatorImage ->

                                                    docker.build('platform-image', "--build-arg hostUid=\$(id -u) --build-arg hostGid=\$(id -g) wrappers/android/config/docker/platform")
                                                            .inside("-v \$HOME/.gradle:/home/jenkins/.gradle --ip=\"10.0.0.4\" --net=$n") {
                                                                dir("wrappers/android") {
                                                                    sh "sleep 10 && adb connect 10.0.0.3:5555"
                                                                    // Wait 10 seconds before connecting to device so we make sure docker image & emulator is spun up
                                                                    sh "wait-for-emulator"
                                                                    sh "adb forward tcp:9701 tcp:9701"
                                                                    sh "adb forward tcp:9702 tcp:9702"
                                                                    sh "adb forward tcp:9703 tcp:9703"
                                                                    sh "adb forward tcp:9704 tcp:9704"
                                                                    sh "adb forward tcp:9705 tcp:9705"
                                                                    sh "adb forward tcp:9706 tcp:9706"
                                                                    sh "adb forward tcp:9707 tcp:9707"
                                                                    sh "adb forward tcp:9708 tcp:9708"
                                                                    // connected check cannot run in parallel.
                                                                    sh "./gradlew ${getTestPreTasks(params.cleanTests)} ${getConnectedCheckTasks(env.BRANCH_NAME)} ${getTestParameters(params.parallelTests, params.buildCacheTests, params.gradleScan)}"
                                                                }
                                                            }

                                                }

                                    }
                            }
                        }
                    }

//                    post {
//                        always {
//                            junit '**/build/outputs/androidTest-results/connected/**/TEST-*.xml'
//                        }
//                    }
                }

            }
        }
    }

}
